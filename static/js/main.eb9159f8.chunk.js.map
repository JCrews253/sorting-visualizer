{"version":3,"sources":["algorithms/MergeSort.ts","algorithms/BubbleSort.ts","algorithms/InsertionSort.ts","algorithms/HeapSort.ts","algorithms/QuickSort.ts","App.tsx","index.tsx"],"names":["queue","Sort","array","aux","low","high","mid","Math","floor","k","i","j","jInput","push","iIndex","jIndex","changedIndex","changedValue","Merge","length","swapped","data","Index","CompareIndex","IndexValue","CompareValue","temp","key","Key","jValue","Heapify","swap1","swap1Value","swap2","swap2Value","n","largest","left","right","pivot","index","Partition","pivotIdx","iValue","Swap","idx1","idx2","MAX_ELEMENT_SIZE_PX","window","innerHeight","App","genRandomArray","arraySize","stepSize","returnArray","random","useState","state","setState","sortingState","setSortingState","setArraySize","speedState","setSpeedState","hasSolution","setHasSolution","HandleReset","SetDefaultColors","sb","document","getElementsByClassName","style","backgroundColor","ColorGenerator","parseInt","height","FinishAnimation","setTimeout","value","r","g","b","step","MergeSort","intData","GetMergeSortData","slice","BubbleSort","InsertionSort","HeapSort","QuickSort","className","rel","href","onClick","selectedAlgo","getElementById","disabled","htmlFor","id","onChange","type","slider","min","max","open","map","ReactDOM","render"],"mappings":"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","file":"static/js/main.eb9159f8.chunk.js","sourcesContent":["export interface IMergeSortData {\r\n  iIndex: number,\r\n  jIndex: number,\r\n  changedIndex: number,\r\n  changedValue: number,\r\n}\r\n\r\nvar queue: IMergeSortData[] = []\r\n\r\nexport function GetMergeSortData(array: number[]): IMergeSortData[]{\r\n    queue = []\r\n    const aux = [...array]\r\n    Sort(array, aux, 0, array.length-1)\r\n    return queue\r\n}\r\n\r\nconst Merge = (array: number[], aux: number[], low: number, mid: number, high: number) => { \r\n    for(let k = low; k <= high; k++){\r\n      aux[k] = array[k]\r\n    }\r\n    var i = low \r\n    var j = mid+1\r\n    for(let k = low; k <= high; k++){\r\n      if(i > mid) { array[k] = aux[j]; j++ }\r\n      else if ( j > high) { array[k] = aux[i]; i++ }\r\n      else if ( aux[j] < aux[i] ) { array[k] = aux[j]; j++ }\r\n      else { array[k] = aux[i]; i++}\r\n\r\n      //Animation Data\r\n      let jInput = j \r\n      if(jInput >= high){ jInput = high }\r\n      queue.push({ \r\n        iIndex: i,\r\n        jIndex: jInput,\r\n        changedIndex: k,\r\n        changedValue: array[k],\r\n      })  \r\n    } \r\n}\r\n\r\nconst Sort = (array: number[], aux: number[], low: number, high: number) => {\r\n    if(high <= low ) { return }\r\n    const mid = Math.floor(low + (high - low) / 2)\r\n    Sort(array, aux, low, mid)\r\n    Sort(array, aux, mid+1, high)\r\n    Merge(array, aux, low, mid, high)\r\n}  ","export interface IBubbleSortData {\r\n    Index: number,\r\n    CompareIndex: number,\r\n    IndexValue: number,\r\n    CompareValue: number,\r\n}\r\n\r\nvar queue: IBubbleSortData[] = []\r\n\r\nexport const GetBubbleSortData = (array: number[]):IBubbleSortData[] => {\r\n    queue = []\r\n    Sort(array)\r\n    return queue\r\n}\r\n\r\nconst Sort = (array: number[]) => {\r\n    for(let i = 0; i < array.length; i++){\r\n        var swapped = false\r\n        for(let j=0; j < array.length - i - 1; j++){\r\n            let data: IBubbleSortData = { \r\n                Index: j,\r\n                CompareIndex: j+1,\r\n                IndexValue: array[j],\r\n                CompareValue: array[j+1]\r\n            }\r\n            if(array[j] > array[j+1]){\r\n                let temp = array[j + 1]\r\n                array[j + 1] = array[j]\r\n                array[j] = temp \r\n                swapped = true\r\n                \r\n                data.IndexValue = array[j]\r\n                data.CompareValue = array[j+1]\r\n            }\r\n            queue.push(data)\r\n        }\r\n        if(!swapped){ break}\r\n    }\r\n}","export interface IInsertionSortData {\r\n    iIndex: number,\r\n    jIndex: number,\r\n    Key: number,\r\n    jValue: number,\r\n}\r\n\r\nvar queue: IInsertionSortData[] = []\r\n\r\nexport const GetInsertionSortData = (array: number[]):IInsertionSortData[] => {\r\n    queue = []\r\n    Sort(array)\r\n    return queue\r\n}\r\n\r\nconst Sort = (array: number[]) => {\r\n    for(let i = 1; i < array.length; i++){\r\n        var key = array[i]\r\n        var j = i - 1    \r\n        while( (array[j] > key) && j >= 0 ){   \r\n            queue.push({iIndex:i, jIndex: j, Key: key, jValue: array[j]})           \r\n            array[j + 1] = array[j]\r\n            j--                 \r\n        } \r\n        array[j+1] = key\r\n    }\r\n}","export interface IHeapSortData {\r\n    swap1: number,\r\n    swap1Value: number,\r\n    swap2: number,\r\n    swap2Value: number,\r\n}\r\n\r\nvar queue: IHeapSortData[] = []\r\n\r\nexport const GetHeapSortData = (array: number[]):IHeapSortData[] => {\r\n    queue = []\r\n    Sort(array)\r\n    return queue\r\n}\r\n\r\nconst Sort = (array: number[]) => {\r\n    for(let i = Math.floor(array.length / 2) - 1; i >= 0; i--) Heapify(array, array.length, i)\r\n    for(let i = array.length - 1; i > 0; i--){\r\n        queue.push({\r\n            swap1: 0, \r\n            swap1Value: array[0], \r\n            swap2: i, \r\n            swap2Value: array[i]\r\n        })\r\n        let temp = array[0]\r\n        array[0] = array[i]\r\n        array[i] = temp\r\n        Heapify(array, i, 0)\r\n    }\r\n}\r\n\r\nconst Heapify = (array: number[], n:number, i: number) => {\r\n    var largest = i\r\n    const left = 2 * i + 1\r\n    const right = 2 * i + 2\r\n\r\n    if(left < n && array[left] > array[largest]) largest = left\r\n    if(right < n && array[right] > array[largest]) largest = right\r\n    if(largest !== i){\r\n        queue.push({\r\n            swap1: i,\r\n            swap1Value: array[i],\r\n            swap2: largest,\r\n            swap2Value: array[largest]\r\n        })       \r\n        let temp = array[i]\r\n        array[i] = array[largest]\r\n        array[largest] = temp\r\n        Heapify(array, n, largest)\r\n    }\r\n}","export interface IQuickSortData {\r\n    iIndex: number,\r\n    iValue: number,\r\n    jIndex: number,\r\n    jValue: number\r\n    pivot: number,\r\n}\r\n\r\nvar queue: IQuickSortData[] = []\r\n\r\nexport const GetQuickSortData = (array: number[]):IQuickSortData[] => {\r\n    queue = []\r\n    Sort(array,0,array.length-1)\r\n    return queue\r\n}\r\n\r\nconst Sort = (array: number[],low:number,high:number) => {\r\n    if(low >= high) return\r\n    const pivot = array[Math.floor((low+high)/2)]\r\n    const index = Partition(array,low,high,pivot,Math.floor((low+high)/2))\r\n    Sort(array,low,index-1)\r\n    Sort(array,index,high)\r\n}\r\n\r\nconst Partition = (array: number[],low:number,high:number,pivot:number,pivotIdx:number):number => {\r\n    let i = low\r\n    let j = high\r\n    queue.push({\r\n        iIndex: i,\r\n        iValue: array[i],\r\n        jIndex: j,\r\n        jValue: array[j],\r\n        pivot: pivotIdx\r\n    })\r\n    while( i <= j ){\r\n        while(array[i] < pivot){\r\n            i++\r\n            if(i < array.length){\r\n                queue.push({\r\n                    iIndex: i,\r\n                    iValue: array[i],\r\n                    jIndex: j,\r\n                    jValue: array[j],\r\n                    pivot: pivotIdx\r\n                })\r\n            }\r\n        } \r\n        while(array[j] > pivot){\r\n            j--\r\n            if(j >= 0){\r\n                queue.push({\r\n                    iIndex: i,\r\n                    iValue: array[i],\r\n                    jIndex: j,\r\n                    jValue: array[j],\r\n                    pivot: pivotIdx\r\n                })\r\n            }\r\n        } \r\n        if(i <= j){\r\n            Swap(array,i,j)\r\n            queue.push({\r\n                iIndex: i,\r\n                iValue: array[i],\r\n                jIndex: j,\r\n                jValue: array[j],\r\n                pivot: pivotIdx\r\n            })\r\n            i++\r\n            j--\r\n            queue.push({\r\n                iIndex: i > array.length - 1 ? array.length -1 : i,\r\n                iValue: array[i],\r\n                jIndex: j < 0 ? 0 : j,\r\n                jValue: array[j],\r\n                pivot: pivotIdx\r\n            })\r\n        }\r\n    }\r\n    return i\r\n}\r\n\r\nconst Swap = (array:number[],idx1:number,idx2:number) => {\r\n    const temp = array[idx1]\r\n    array[idx1] = array[idx2]\r\n    array[idx2] = temp\r\n}","import React from 'react';\nimport './App.css';\nimport { useState } from 'react';\nimport { GetMergeSortData } from './algorithms/MergeSort';\nimport { GetBubbleSortData } from './algorithms/BubbleSort';\nimport { GetInsertionSortData } from './algorithms/InsertionSort';\nimport { GetHeapSortData } from './algorithms/HeapSort';\nimport { GetQuickSortData } from './algorithms/QuickSort';\n\nconst MIN_ELEMENT_SIZE_PX = 15;\nconst MAX_ELEMENT_SIZE_PX = window.innerHeight;\nconst DEFAULT_ITERATION_SPEED_MS = 10;\nconst DEFAULT_ARRAY_SIZE = 50 ;\n\nfunction App() {\n  const genRandomArray = (arraySize: number): number[] => {\n    const stepSize = (MAX_ELEMENT_SIZE_PX-MIN_ELEMENT_SIZE_PX)/arraySize\n    const returnArray = []\n    for(let i = 0; i < arraySize; i++){\n      returnArray[i] = i * stepSize + MIN_ELEMENT_SIZE_PX\n    }\n    for(let i = returnArray.length - 1; i > 0; i--){\n      const j = Math.floor(Math.random() * i)   \n      const temp:number = returnArray[i]\n      returnArray[i] = returnArray[j]\n      returnArray[j] = temp\n    }\n    return returnArray\n  }\n\n  const [state, setState] = useState( () => genRandomArray(DEFAULT_ARRAY_SIZE))\n  const [sortingState, setSortingState] = useState(false)\n  const [arraySize, setArraySize] = useState(DEFAULT_ARRAY_SIZE)\n  const [speedState, setSpeedState] = useState(DEFAULT_ITERATION_SPEED_MS)\n  const [hasSolution,setHasSolution] = useState(false)\n\n  const HandleStart = () => {\n    if(hasSolution) setState(genRandomArray(state.length))\n    setSortingState(true)\n    const selectedAlgo = document.getElementById('algo-select') as HTMLInputElement\n    let x = selectedAlgo.value === 'mergeSort' ? MergeSort() : \n      selectedAlgo.value === 'bubbleSort' ? BubbleSort() : \n      selectedAlgo.value === 'insertionSort' ? InsertionSort() :  \n      selectedAlgo.value === 'heapSort' ? HeapSort() : \n      selectedAlgo.value === 'quickSort' ? QuickSort() : null\n  }\n\n  const HandleReset = () => {\n    SetDefaultColors()\n    setState(genRandomArray(arraySize))\n    setHasSolution(false)\n  }\n\n  const HandleSizeChange = () => {\n    const slider = document.getElementById('elementSlider') as HTMLInputElement\n    SetDefaultColors()\n    setArraySize(parseInt(slider.value))\n    setState(genRandomArray(parseInt(slider.value)))\n    setHasSolution(false)\n  }\n\n  const HandleSpeedChange = () => {\n    const slider = document.getElementById('speedSlider') as HTMLInputElement\n    setSpeedState(parseInt(slider.value))\n  }\n\n  const HandleGitHubClick = () => {\n    window.open(\"https://github.com/JCrews253/sorting-visualizer\")\n  }\n\n  const HandleHomeClick = () => {\n    \n  }\n\n  const SetDefaultColors = () => {\n    const sb = document.getElementsByClassName('sorting-bar') as HTMLCollectionOf<HTMLElement>\n    for(let i = 0; i < sb.length; i++) {\n        sb[i].style.backgroundColor = ColorGenerator(parseInt(sb[i].style.height))\n    }       \n  }\n\n  const FinishAnimation = () => {\n    const sb = document.getElementsByClassName('sorting-bar') as HTMLCollectionOf<HTMLElement>\n    for(let j = 1; j < sb.length; j++){\n      setTimeout( () => {\n        sb[j-1].style.backgroundColor = ColorGenerator(parseInt(sb[j-1].style.height))\n        sb[j].style.backgroundColor = 'white'\n        if(j === sb.length-1) {\n          sb[j].style.backgroundColor = ColorGenerator(parseInt(sb[j].style.height))\n          setSortingState(false)\n          setHasSolution(true)\n        }\n      },  j * speedState)\n    }\n  }\n\n  const ColorGenerator = (value: number): string => {\n    let r = 0, g = 0, b = 0\n    const step = MAX_ELEMENT_SIZE_PX/1275\n    if(value <= step*255){r=255; g=value/step; b=0}\n    else if(value <= step*255*2){r=255-(value/step-255); g=255; b=0}\n    else if(value <= step*255*3){r=0; g=255; b=value/step-255*2}\n    else if(value <= step*255*4){r=0; g=255-(value/step-255*3); b=255}\n    else if(value <= step*255*5){r=value/step-255*4; g=0; b=255}\n    return `rgb(${Math.floor(r)} ${Math.floor(g)} ${Math.floor(b)})`\n  }\n\n  const MergeSort = () => {\n    const intData = GetMergeSortData(state.slice())\n    const sb = document.getElementsByClassName('sorting-bar') as HTMLCollectionOf<HTMLElement>\n    for(let i = 1; i < intData.length; i++){\n      setTimeout(() => {\n        SetDefaultColors()\n        sb[intData[i].iIndex].style.backgroundColor = 'white'\n        sb[intData[i].jIndex].style.backgroundColor = 'white'\n        sb[intData[i].changedIndex].style.backgroundColor = `white`\n        sb[intData[i].changedIndex].style.height = `${intData[i].changedValue}px`\n        if(i === intData.length-1) FinishAnimation()\n      }, i * speedState)\n    }\n  }\n\n  const BubbleSort = () => {\n    const intData = GetBubbleSortData(state.slice())\n    const sb = document.getElementsByClassName('sorting-bar') as HTMLCollectionOf<HTMLElement>\n    for(let i = 0; i < intData.length; i++){\n      setTimeout( () => {\n        SetDefaultColors()\n        sb[intData[i].Index].style.backgroundColor = 'white'\n        sb[intData[i].CompareIndex].style.backgroundColor = 'white'\n        sb[intData[i].Index].style.height = `${intData[i].IndexValue}px`\n        sb[intData[i].CompareIndex].style.height = `${intData[i].CompareValue}px`\n        if(i === intData.length-1) FinishAnimation()\n      }, i * speedState)\n    }\n  }\n\n  const InsertionSort = () => {\n    const intData = GetInsertionSortData(state.slice())\n    const sb = document.getElementsByClassName('sorting-bar') as HTMLCollectionOf<HTMLElement>\n    for(let i = 0; i < intData.length; i++){\n      setTimeout(() => {\n        SetDefaultColors()\n        sb[intData[i].iIndex].style.backgroundColor = 'white'\n        sb[intData[i].jIndex].style.backgroundColor = 'white'\n        sb[intData[i].jIndex].style.height = `${intData[i].Key}px`\n        sb[intData[i].jIndex + 1].style.height = `${intData[i].jValue}px`\n        sb[intData[i].jIndex + 1].style.backgroundColor = ColorGenerator(parseInt(sb[intData[i].jIndex + 1].style.height))       \n        if(i === intData.length-1) FinishAnimation()     \n      }, i * speedState)\n    }\n  }\n\n  const HeapSort = () => {\n    const intData = GetHeapSortData(state.slice())\n    const sb = document.getElementsByClassName('sorting-bar') as HTMLCollectionOf<HTMLElement>\n    for(let i = 0; i < intData.length; i++){\n      setTimeout( ()=> {\n        SetDefaultColors()\n        sb[intData[i].swap1].style.backgroundColor = 'white'\n        sb[intData[i].swap2].style.backgroundColor = 'white'\n        sb[intData[i].swap1].style.height = `${intData[i].swap2Value}px`\n        sb[intData[i].swap2].style.height = `${intData[i].swap1Value}px`\n        if(i === intData.length-1) FinishAnimation()\n      }, i * speedState)\n    }\n  }\n\n  const QuickSort = () => {\n    const intData = GetQuickSortData(state.slice())\n    const sb = document.getElementsByClassName('sorting-bar') as HTMLCollectionOf<HTMLElement>\n    for(let i = 0; i < intData.length; i++){\n      setTimeout( ()=> {\n        SetDefaultColors()\n        sb[intData[i].iIndex].style.backgroundColor = 'white'\n        sb[intData[i].jIndex].style.backgroundColor = 'white'\n        sb[intData[i].pivot].style.backgroundColor = 'white'\n        sb[intData[i].iIndex].style.height = `${intData[i].iValue}px`\n        sb[intData[i].jIndex].style.height = `${intData[i].jValue}px`\n        if(i === intData.length-1) FinishAnimation()\n      }, i * speedState)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className='toolbar'>\n      <link \n        rel=\"stylesheet\" \n        href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"/>\n        <button \n          className='icon-button'\n          onClick={HandleHomeClick}>\n            <i className=\"fa fa-home\"/>\n        </button>\n        <button \n          className='icon-button'\n          onClick={HandleStart}\n          disabled= {sortingState}>\n            <i className=\"fa fa-play\"/>\n        </button>\n        <div className='toolbar-div'>\n          <label \n            className='toolbar-label' \n            htmlFor='algo-select'>Algorithm:\n          </label>\n          <select \n            id='algo-select' \n            onChange={HandleReset} \n            disabled= {sortingState}\n            >\n            <option value='mergeSort'>Merge</option>\n            <option value='quickSort'>Quick</option>\n            <option value='heapSort'>Heap</option>\n            <option value='bubbleSort'>Bubble</option>\n            <option value='insertionSort'>Insertion</option>\n          </select>\n        </div>\n        <div className='toolbar-div'>\n          <label \n            className='toolbar-label' \n            htmlFor='elementSlider'>Elements:\n          </label>\n          <input \n            id='elementSlider'\n            className='slider' \n            type='range' \n            onChange={HandleSizeChange}\n            min='20'\n            max='200'\n            value={arraySize}\n            disabled={sortingState}/>\n            <label>{arraySize}</label>\n        </div>\n        <div className='toolbar-div'>\n          <label \n            className='toolbar-label' \n            htmlFor='speedSlider'>Delay:\n          </label>\n          <input \n            id='speedSlider'\n            className='slider' \n            type='range' \n            onChange={HandleSpeedChange}\n            min='1'\n            max='100'\n            value={speedState}\n            disabled={sortingState}/>\n            <label>{speedState} ms</label>\n        </div>\n        <button \n          className='icon-button'\n          onClick={HandleReset}\n          disabled= {sortingState}>\n            <i className=\"fa fa-random\"/>\n        </button>\n        <button \n          className='button-end icon-button'\n          onClick={HandleGitHubClick}>\n            <i className=\"fa fa-github\"/>\n        </button>\n      </div>\n      <div className='sorting-area'>\n        {state.map((value, index) => (\n          <div className='sorting-bar'\n          key = {index}\n          style={{\n            backgroundColor: `${ColorGenerator(value)}`,\n            height: `${value}px`\n          }}>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}