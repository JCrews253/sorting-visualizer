{"version":3,"sources":["algorithms/MergeSort.ts","algorithms/BubbleSort.ts","algorithms/InsertionSort.ts","algorithms/HeapSort.ts","App.tsx","index.tsx"],"names":["queue","Sort","array","aux","low","high","mid","Math","floor","k","i","j","jInput","push","iIndex","jIndex","changedIndex","changedValue","Merge","length","swapped","data","Index","CompareIndex","IndexValue","CompareValue","temp","key","Key","jValue","Heapify","swap1","swap1Value","swap2","swap2Value","n","largest","left","right","MAX_ELEMENT_SIZE_PX","window","innerHeight","App","genRandomArray","arraySize","stepSize","returnArray","random","useState","state","setState","sortingState","setSortingState","setArraySize","speedState","setSpeedState","HandleReset","SetDefaultColors","sb","document","getElementsByClassName","style","backgroundColor","ColorGenerator","parseInt","height","FinishAnimation","setTimeout","value","r","g","b","step","MergeSort","intData","GetMergeSortData","slice","BubbleSort","InsertionSort","HeapSort","className","rel","href","onClick","selectedAlgo","getElementById","disabled","htmlFor","id","onChange","type","slider","min","max","open","map","index","ReactDOM","render"],"mappings":"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","file":"static/js/main.c67f0985.chunk.js","sourcesContent":["export interface IMergeSortData {\r\n  iIndex: number,\r\n  jIndex: number,\r\n  changedIndex: number,\r\n  changedValue: number,\r\n}\r\n\r\nvar queue: IMergeSortData[] = []\r\n\r\nexport function GetMergeSortData(array: number[]): IMergeSortData[]{\r\n    queue = []\r\n    const aux = [...array]\r\n    Sort(array, aux, 0, array.length-1)\r\n    return queue\r\n}\r\n\r\nconst Merge = (array: number[], aux: number[], low: number, mid: number, high: number) => { \r\n    for(let k = low; k <= high; k++){\r\n      aux[k] = array[k]\r\n    }\r\n    var i = low \r\n    var j = mid+1\r\n    for(let k = low; k <= high; k++){\r\n      if(i > mid) { array[k] = aux[j]; j++ }\r\n      else if ( j > high) { array[k] = aux[i]; i++ }\r\n      else if ( aux[j] < aux[i] ) { array[k] = aux[j]; j++ }\r\n      else { array[k] = aux[i]; i++}\r\n\r\n      //Animation Data\r\n      let jInput = j \r\n      if(jInput >= high){ jInput = high }\r\n      queue.push({ \r\n        iIndex: i,\r\n        jIndex: jInput,\r\n        changedIndex: k,\r\n        changedValue: array[k],\r\n      })  \r\n    } \r\n}\r\n\r\nconst Sort = (array: number[], aux: number[], low: number, high: number) => {\r\n    if(high <= low ) { return }\r\n    const mid = Math.floor(low + (high - low) / 2)\r\n    Sort(array, aux, low, mid)\r\n    Sort(array, aux, mid+1, high)\r\n    Merge(array, aux, low, mid, high)\r\n}  ","export interface IBubbleSortData {\r\n    Index: number,\r\n    CompareIndex: number,\r\n    IndexValue: number,\r\n    CompareValue: number,\r\n}\r\n\r\nvar queue: IBubbleSortData[] = []\r\n\r\nexport const GetBubbleSortData = (array: number[]):IBubbleSortData[] => {\r\n    queue = []\r\n    Sort(array)\r\n    return queue\r\n}\r\n\r\nconst Sort = (array: number[]) => {\r\n    for(let i = 0; i < array.length; i++){\r\n        var swapped = false\r\n        for(let j=0; j < array.length - i - 1; j++){\r\n            let data: IBubbleSortData = { \r\n                Index: j,\r\n                CompareIndex: j+1,\r\n                IndexValue: array[j],\r\n                CompareValue: array[j+1]\r\n            }\r\n            if(array[j] > array[j+1]){\r\n                let temp = array[j + 1]\r\n                array[j + 1] = array[j]\r\n                array[j] = temp \r\n                swapped = true\r\n                \r\n                data.IndexValue = array[j]\r\n                data.CompareValue = array[j+1]\r\n            }\r\n            queue.push(data)\r\n        }\r\n        if(!swapped){ break}\r\n    }\r\n}","export interface IInsertionSortData {\r\n    iIndex: number,\r\n    jIndex: number,\r\n    Key: number,\r\n    jValue: number,\r\n}\r\n\r\nvar queue: IInsertionSortData[] = []\r\n\r\nexport const GetInsertionSortData = (array: number[]):IInsertionSortData[] => {\r\n    queue = []\r\n    Sort(array)\r\n    return queue\r\n}\r\n\r\nconst Sort = (array: number[]) => {\r\n    for(let i = 1; i < array.length; i++){\r\n        var key = array[i]\r\n        var j = i - 1    \r\n        while( (array[j] > key) && j >= 0 ){   \r\n            queue.push({iIndex:i, jIndex: j, Key: key, jValue: array[j]})           \r\n            array[j + 1] = array[j]\r\n            j--                 \r\n        } \r\n        array[j+1] = key\r\n    }\r\n}","export interface IHeapSortData {\r\n    swap1: number,\r\n    swap1Value: number,\r\n    swap2: number,\r\n    swap2Value: number,\r\n}\r\n\r\nvar queue: IHeapSortData[] = []\r\n\r\nexport const GetHeapSortData = (array: number[]):IHeapSortData[] => {\r\n    queue = []\r\n    Sort(array)\r\n    return queue\r\n}\r\n\r\nconst Sort = (array: number[]) => {\r\n    for(let i = Math.floor(array.length / 2) - 1; i >= 0; i--) Heapify(array, array.length, i)\r\n    for(let i = array.length - 1; i > 0; i--){\r\n        queue.push({\r\n            swap1: 0, \r\n            swap1Value: array[0], \r\n            swap2: i, \r\n            swap2Value: array[i]\r\n        })\r\n        let temp = array[0]\r\n        array[0] = array[i]\r\n        array[i] = temp\r\n        Heapify(array, i, 0)\r\n    }\r\n}\r\n\r\nconst Heapify = (array: number[], n:number, i: number) => {\r\n    var largest = i\r\n    const left = 2 * i + 1\r\n    const right = 2 * i + 2\r\n\r\n    if(left < n && array[left] > array[largest]) largest = left\r\n    if(right < n && array[right] > array[largest]) largest = right\r\n    if(largest !== i){\r\n        queue.push({\r\n            swap1: i,\r\n            swap1Value: array[i],\r\n            swap2: largest,\r\n            swap2Value: array[largest]\r\n        })       \r\n        let temp = array[i]\r\n        array[i] = array[largest]\r\n        array[largest] = temp\r\n        Heapify(array, n, largest)\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { useState } from 'react';\nimport { GetMergeSortData } from './algorithms/MergeSort';\nimport { GetBubbleSortData } from './algorithms/BubbleSort';\nimport { GetInsertionSortData } from './algorithms/InsertionSort';\nimport { GetHeapSortData } from './algorithms/HeapSort';\n\nconst MIN_ELEMENT_SIZE_PX = 15;\nconst MAX_ELEMENT_SIZE_PX = window.innerHeight;\nconst DEFAULT_ITERATION_SPEED_MS = 10;\nconst DEFAULT_ARRAY_SIZE = 50 ;\n\nfunction App() {\n  const genRandomArray = (arraySize: number): number[] => {\n    const stepSize = (MAX_ELEMENT_SIZE_PX-MIN_ELEMENT_SIZE_PX)/arraySize\n    const returnArray = []\n    for(let i = 0; i < arraySize; i++){\n      returnArray[i] = i * stepSize + MIN_ELEMENT_SIZE_PX\n    }\n    for(let i = returnArray.length - 1; i > 0; i--){\n      const j = Math.floor(Math.random() * i)   \n      const temp:number = returnArray[i]\n      returnArray[i] = returnArray[j]\n      returnArray[j] = temp\n    }\n    return returnArray\n  }\n\n  const [state, setState] = useState( () => genRandomArray(DEFAULT_ARRAY_SIZE))\n  const [sortingState, setSortingState] = useState(false)\n  const [arraySize, setArraySize] = useState(DEFAULT_ARRAY_SIZE)\n  const [speedState, setSpeedState] = useState(DEFAULT_ITERATION_SPEED_MS)\n\n  const HandleStart = () => {\n    setSortingState(true)\n    const selectedAlgo = document.getElementById('algo-select') as HTMLInputElement\n    let x = selectedAlgo.value === 'mergeSort' ? MergeSort() : \n      selectedAlgo.value === 'bubbleSort' ? BubbleSort() : \n      selectedAlgo.value === 'insertionSort' ? InsertionSort() :  \n      selectedAlgo.value === 'heapSort' ? HeapSort() : null\n  }\n\n  const HandleReset = () => {\n    SetDefaultColors()\n    setState(genRandomArray(arraySize))\n  }\n\n  const HandleSizeChange = () => {\n    const slider = document.getElementById('elementSlider') as HTMLInputElement\n    SetDefaultColors()\n    setArraySize(parseInt(slider.value))\n    setState(genRandomArray(parseInt(slider.value)))\n  }\n\n  const HandleSpeedChange = () => {\n    const slider = document.getElementById('speedSlider') as HTMLInputElement\n    setSpeedState(parseInt(slider.value))\n  }\n\n  const HandleGitHubClick = () => {\n    window.open(\"https://github.com/JCrews253/sorting-visualizer\")\n  }\n\n  const HandleHomeClick = () => {\n    \n  }\n\n  const SetDefaultColors = () => {\n    const sb = document.getElementsByClassName('sorting-bar') as HTMLCollectionOf<HTMLElement>\n    for(let i = 0; i < sb.length; i++) {\n        sb[i].style.backgroundColor = ColorGenerator(parseInt(sb[i].style.height))\n    }       \n  }\n\n  const FinishAnimation = () => {\n    const sb = document.getElementsByClassName('sorting-bar') as HTMLCollectionOf<HTMLElement>\n    for(let j = 1; j < sb.length; j++){\n      setTimeout( () => {\n        sb[j-1].style.backgroundColor = ColorGenerator(parseInt(sb[j-1].style.height))\n        sb[j].style.backgroundColor = 'white'\n        if(j === sb.length-1) {\n          sb[j].style.backgroundColor = ColorGenerator(parseInt(sb[j].style.height))\n          setSortingState(false)\n        }\n      },  j * speedState)\n    }\n  }\n\n  const ColorGenerator = (value: number): string => {\n    let r = 0, g = 0, b = 0\n    const step = MAX_ELEMENT_SIZE_PX/1275\n    if(value <= step*255){r=255; g=value/step; b=0}\n    else if(value <= step*255*2){r=255-(value/step-255); g=255; b=0}\n    else if(value <= step*255*3){r=0; g=255; b=value/step-255*2}\n    else if(value <= step*255*4){r=0; g=255-(value/step-255*3); b=255}\n    else if(value <= step*255*5){r=value/step-255*4; g=0; b=255}\n    return `rgb(${Math.floor(r)} ${Math.floor(g)} ${Math.floor(b)})`\n  }\n\n  const MergeSort = () => {\n    const intData = GetMergeSortData(state.slice())\n    const sb = document.getElementsByClassName('sorting-bar') as HTMLCollectionOf<HTMLElement>\n    for(let i = 1; i < intData.length; i++){\n      setTimeout(() => {\n        SetDefaultColors()\n        sb[intData[i].iIndex].style.backgroundColor = 'white'\n        sb[intData[i].jIndex].style.backgroundColor = 'white'\n        sb[intData[i].changedIndex].style.backgroundColor = `white`\n        sb[intData[i].changedIndex].style.height = `${intData[i].changedValue}px`\n        if(i === intData.length-1) FinishAnimation()\n      }, i * speedState)\n    }\n  }\n\n  const BubbleSort = () => {\n    const intData = GetBubbleSortData(state.slice())\n    const sb = document.getElementsByClassName('sorting-bar') as HTMLCollectionOf<HTMLElement>\n    for(let i = 0; i < intData.length; i++){\n      setTimeout( () => {\n        SetDefaultColors()\n        sb[intData[i].Index].style.backgroundColor = 'white'\n        sb[intData[i].CompareIndex].style.backgroundColor = 'white'\n        sb[intData[i].Index].style.height = `${intData[i].IndexValue}px`\n        sb[intData[i].CompareIndex].style.height = `${intData[i].CompareValue}px`\n        if(i === intData.length-1) FinishAnimation()\n      }, i * speedState)\n    }\n  }\n\n  const InsertionSort = () => {\n    const intData = GetInsertionSortData(state.slice())\n    const sb = document.getElementsByClassName('sorting-bar') as HTMLCollectionOf<HTMLElement>\n    for(let i = 0; i < intData.length; i++){\n      setTimeout(() => {\n        SetDefaultColors()\n        sb[intData[i].iIndex].style.backgroundColor = 'white'\n        sb[intData[i].jIndex].style.backgroundColor = 'white'\n        sb[intData[i].jIndex].style.height = `${intData[i].Key}px`\n        sb[intData[i].jIndex + 1].style.height = `${intData[i].jValue}px`\n        sb[intData[i].jIndex + 1].style.backgroundColor = ColorGenerator(parseInt(sb[intData[i].jIndex + 1].style.height))       \n        if(i === intData.length-1) FinishAnimation()     \n      }, i * speedState)\n    }\n  }\n\n  const HeapSort = () => {\n    const intData = GetHeapSortData(state.slice())\n    const sb = document.getElementsByClassName('sorting-bar') as HTMLCollectionOf<HTMLElement>\n    for(let i = 0; i < intData.length; i++){\n      setTimeout( ()=> {\n        SetDefaultColors()\n        sb[intData[i].swap1].style.backgroundColor = 'white'\n        sb[intData[i].swap2].style.backgroundColor = 'white'\n        sb[intData[i].swap1].style.height = `${intData[i].swap2Value}px`\n        sb[intData[i].swap2].style.height = `${intData[i].swap1Value}px`\n        if(i === intData.length-1) FinishAnimation()\n      }, i * speedState)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className='toolbar'>\n      <link \n        rel=\"stylesheet\" \n        href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"/>\n        <button \n          className='icon-button'\n          onClick={HandleHomeClick}>\n            <i className=\"fa fa-home\"/>\n        </button>\n        <button \n          className='icon-button'\n          onClick={HandleStart}\n          disabled= {sortingState}>\n            <i className=\"fa fa-play\"/>\n        </button>\n        <div className='toolbar-div'>\n          <label \n            className='toolbar-label' \n            htmlFor='algo-select'>Algorithm:\n          </label>\n          <select \n            id='algo-select' \n            onChange={HandleReset} \n            disabled= {sortingState}\n            >\n            <option value='mergeSort'>Merge</option>\n            <option value='bubbleSort'>Bubble</option>\n            <option value='insertionSort'>Insertion</option>\n            <option value='heapSort'>Heap</option>\n          </select>\n        </div>\n        <div className='toolbar-div'>\n          <label \n            className='toolbar-label' \n            htmlFor='elementSlider'>Elements:\n          </label>\n          <input \n            id='elementSlider'\n            className='slider' \n            type='range' \n            onChange={HandleSizeChange}\n            min='20'\n            max='200'\n            value={arraySize}\n            disabled={sortingState}/>\n            <label>{arraySize}</label>\n        </div>\n        <div className='toolbar-div'>\n          <label \n            className='toolbar-label' \n            htmlFor='speedSlider'>Delay:\n          </label>\n          <input \n            id='speedSlider'\n            className='slider' \n            type='range' \n            onChange={HandleSpeedChange}\n            min='1'\n            max='100'\n            value={speedState}\n            disabled={sortingState}/>\n            <label>{speedState} ms</label>\n        </div>\n        <button \n          className='icon-button'\n          onClick={HandleReset}\n          disabled= {sortingState}>\n            <i className=\"fa fa-random\"/>\n        </button>\n        <button \n          className='button-end icon-button'\n          onClick={HandleGitHubClick}>\n            <i className=\"fa fa-github\"/>\n        </button>\n      </div>\n      <div className='sorting-area'>\n        {state.map((value, index) => (\n          <div className='sorting-bar'\n          key = {index}\n          style={{\n            backgroundColor: `${ColorGenerator(value)}`,\n            height: `${value}px`\n          }}>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}